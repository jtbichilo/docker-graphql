name: Docker Image CI
# Triggers para hacer el cambio
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    # Cada uno de los guiones es un step/paso/fase
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Crear versionado automatico
    # url documentacion: https://github.com/marketplace/actions/git-semantic-version?version=v4.0.3
    - name: Git Semantic Version
      uses: PaulHatch/semantic-version@v4.0.3
      with:
        major_pattern: "major:"
        minor_pattern: "feat:"
        format: "${major}.${minor}.${patch}-prerelease${increment}"

      # ID del paso
      id: version_app

    - name: Docker login
      env:
        DOCKER_USER: ${{secrets.DOCKER_USER}}
        DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}

        # Sacamos la version del paso anterior donde generamos la version 
        # con el ID version_app. Para poder acceder a el, utilizamos la constante steps
        # que se refiere a todos los steps, y luego el id del paso/step/fase correspondiente
        NEW_VERSION: ${{ steps.version_app.output.version }}
        
      # La tuberia (|) significa que cada una de las lineas que 
      # incluyamos se ejecutara de manera independiente
      run: | 
        echo "Iniciando login"
        docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
        echo "New version creada $NEW_VERSION****"
        echo "Fin del login"

    # # Siguiente paso, construir imagen de docker.
    # - name: Build docker image
    #   run: |
    #     docker build --tag jtoroyo/docker-graphql:0.0.2 .
    #     docker build --tag jtoroyo/docker-graphql:latest .

    #   # Push de la imagen a docker hub.
    # - name: Push docker image
    #   run: |
    #     docker push jtoroyo/docker-graphql:0.0.2
    #     docker push jtoroyo/docker-graphql:latest
        
    # - name: Build the Docker image
    #   run: docker build . --file Dockerfile --tag my-image-name:$(date +%s)
